#include <iostream>
#include <time.h>

template <typename Type>
Type backfib(int n) // Функция рекурсивного подсчета на темлейтах
{
    if (n < 0)
    {
        return 0;
    }
    else
    {
        switch (n)
        {
        case 0:
            return 1;
            break;
        case 1:
            return 1;
            break;
        default:
            return backfib<long long>(n - 2) + backfib<long long>(n - 1);
            break;
        }
    }
}

long long RecFib(int n)
{
    if (n < 0)
    {
        return 0;
    }
    else
    {
        switch (n)
        {
        case 0:
            return 1;
            break;
        case 1:
            return 1;
            break;
        default:
            return RecFib(n - 2) + RecFib(n - 1);
            break;
        }
    }
} 

long long LinFib(int n)
{
    long long sol, F1, F2;
    sol = 0;
    F1 = 0;
    F2 = 1;
    for (int i = 1;i<=n;i++)
    {
        sol = F1 + F2;
        F1 = F2;
        F2 = sol;
    }
    return sol;
}
    
long long MatrixFib(int m)
{
    long long M[8];
    M[0] = 1;   //M0 M1||M4 M5
    M[1] = 1;   //M2 M3||M6 M7
    M[2] = 1;
    M[3] = 0;
    M[4] = 1;
    M[5] = 1;
    M[6] = 1;
    M[7] = 0;
    long long t1, t2, t3,t4,t5,t6;
    while (m != 0)
    {
        t1 = M[1];
        t2 = M[3];
        if (m % 2 == 1)
        {
            m--;
            M[1] = (M[0] * M[5]) + (t1 * M[7]);
            M[0] = (M[0] * M[4]) + (t1 * M[6]);
            M[3] = (M[2] * M[5]) + (t2 * M[7]);
            M[2] = (M[2] * M[4]) + (t2 * M[6]);
        }
        else
        {
            t3 = M[4];
            t4 = M[5];
            t5 = M[6];
            t6 = M[7];
            m = m / 2;
            M[4] = t3 * t3 + t4 * t5;
            M[5] = t3 * t4 + t4 * t6;
            M[6] = t5 * t3 + t6 * t5;
            M[7] = t5 * t4 + t6 * t6;
        }
    }

    return M[3];
}

int main()
{
    int n,m;
    std::cout << "Enter the n: ";
    std::cin >> n;
    m = n - 1; // Некоторые алгоритмы сдвигают само число на 1. Этот "костыль" фиксит проблемку
    long long Fib;
    long t, t1;
    t = time(NULL);
    Fib = backfib<long long>(m);
    t1 = time(NULL);
    std::cout << "Fib("<<n<<")= "<<Fib<<"\n"; // Ну-с, это ф-ия темплейтная
    std::cout << "Elapsed time for templated function = " << t1 - t<<"\n";
    t = time(NULL);
    Fib = RecFib(m);
    t1 = time(NULL);
    std::cout << "Fib(" << n <<")= " << Fib << "\n"; // Ради интереса. Для определения насколько же медленнее считает обычная рекурсия
    std::cout << "Elapsed time for untemplated function = " << t1 - t <<"\n";
    t = time(NULL);
    Fib = LinFib(m);
    t1 = time(NULL);
    std::cout << "Fib(" << n <<")= " << Fib << "\n"; // А это у нас линейная ф-ия
    std::cout << "Elapsed time for linear function = " << t1 - t<<"\n";
    t = time(NULL);
    Fib = MatrixFib(n);
    t1 = time(NULL);
    std::cout << "Fib(" << n << ")= " << Fib << "\n"; // Расчет с помощью матриц
    std::cout << "Elapsed time for matrix function = " << t1 - t;
}
